#!/bin/bash

# Script which tests the compiler against all test programs in exampleProgs

# test_compile ($1 == file, $2 == expected code, )
# Attempts to compile a program and compares the exit code
# to the expected. Saves the results in temp
test_compile () {
  ./compile $1
  code=$?
  if [ $code -eq $2 ]
  then
    printf "<testcase name=\"$1\" />\n" >> temp
  else
    printf "<testcase name=\"$1\" >\n" >> temp
    printf "<failure message=\"Expected exit code = 200, got $code\" type=\"FAIL\" />\n" >> temp
    printf "</testcase>\n" >> temp
  fi
}

# count_results ($1 == testsuite_name, $2 == num_skipped_tests, $3 == results_file)
# Counts how many test cases have failed and stores the results in 
# results_file
count_results () {
  fails=$(cat temp | grep -E "(FAIL)" | wc -l)
  tests=$(cat temp | grep -E "testcase name=" | wc -l)
  printf "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" > $3
  printf "<testsuite name=\"Programs at: $1\" tests=\"$tests\" failures=\"$fails\"  skipped=\"$2\">\n" >> $3
  cat temp >> $3
  printf "</testsuite>\n" >> $3
}


# Test results for valid tests


fileLs=$(cat exampleProgs/valid.selection | tr " " "\n")
skipped=0
printf "" > temp
for file in $fileLs
do
  if [[ $file == \'* ]]
  then
    skipped=$((skipped + 1))
  else
    test_compile $file 0
  fi
done
count_results "valid folder" $skipped "validRes.xml"

# Test result for syntax errors

fileLs=$(cat exampleProgs/syntax.selection | tr " " "\n")
skipped=0
printf "" > temp
for file in $fileLs
do
  if [[ $file == \'* ]]
  then
    skipped=$((skipped + 1))
  else
    test_compile $file 100
  fi
done
count_results "syntax folder" $skipped "syntaxRes.xml"

# Test result for semantic errors

fileLs=$(cat exampleProgs/semantic.selection | tr " " "\n")
skipped=0
printf "" > temp
for file in $fileLs
do
  if [[ $file == \'* ]]
  then
    skipped=$((skipped + 1))
  else
    test_compile $file 200 
  fi
done
count_results "semantic folder" $skipped "semanticRes.xml"

rm temp